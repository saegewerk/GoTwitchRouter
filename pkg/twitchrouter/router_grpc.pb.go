// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package twitchrouter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TwitchRouterClient is the client API for TwitchRouter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TwitchRouterClient interface {
	Message(ctx context.Context, opts ...grpc.CallOption) (TwitchRouter_MessageClient, error)
}

type twitchRouterClient struct {
	cc grpc.ClientConnInterface
}

func NewTwitchRouterClient(cc grpc.ClientConnInterface) TwitchRouterClient {
	return &twitchRouterClient{cc}
}

func (c *twitchRouterClient) Message(ctx context.Context, opts ...grpc.CallOption) (TwitchRouter_MessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &TwitchRouter_ServiceDesc.Streams[0], "/twitchRouter.TwitchRouter/Message", opts...)
	if err != nil {
		return nil, err
	}
	x := &twitchRouterMessageClient{stream}
	return x, nil
}

type TwitchRouter_MessageClient interface {
	Send(*MessageRequest) error
	Recv() (*MessageResponse, error)
	grpc.ClientStream
}

type twitchRouterMessageClient struct {
	grpc.ClientStream
}

func (x *twitchRouterMessageClient) Send(m *MessageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *twitchRouterMessageClient) Recv() (*MessageResponse, error) {
	m := new(MessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TwitchRouterServer is the server API for TwitchRouter service.
// All implementations must embed UnimplementedTwitchRouterServer
// for forward compatibility
type TwitchRouterServer interface {
	Message(TwitchRouter_MessageServer) error
	mustEmbedUnimplementedTwitchRouterServer()
}

// UnimplementedTwitchRouterServer must be embedded to have forward compatible implementations.
type UnimplementedTwitchRouterServer struct {
}

func (UnimplementedTwitchRouterServer) Message(TwitchRouter_MessageServer) error {
	return status.Errorf(codes.Unimplemented, "method Message not implemented")
}
func (UnimplementedTwitchRouterServer) mustEmbedUnimplementedTwitchRouterServer() {}

// UnsafeTwitchRouterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TwitchRouterServer will
// result in compilation errors.
type UnsafeTwitchRouterServer interface {
	mustEmbedUnimplementedTwitchRouterServer()
}

func RegisterTwitchRouterServer(s grpc.ServiceRegistrar, srv TwitchRouterServer) {
	s.RegisterService(&TwitchRouter_ServiceDesc, srv)
}

func _TwitchRouter_Message_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TwitchRouterServer).Message(&twitchRouterMessageServer{stream})
}

type TwitchRouter_MessageServer interface {
	Send(*MessageResponse) error
	Recv() (*MessageRequest, error)
	grpc.ServerStream
}

type twitchRouterMessageServer struct {
	grpc.ServerStream
}

func (x *twitchRouterMessageServer) Send(m *MessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *twitchRouterMessageServer) Recv() (*MessageRequest, error) {
	m := new(MessageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TwitchRouter_ServiceDesc is the grpc.ServiceDesc for TwitchRouter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TwitchRouter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "twitchRouter.TwitchRouter",
	HandlerType: (*TwitchRouterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Message",
			Handler:       _TwitchRouter_Message_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "router.proto",
}
